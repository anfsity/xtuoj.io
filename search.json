[{"title":"Class Test","date":"2025-05-21T09:49:18.000Z","url":"/xtuoj.io/2025/05/21/Class-Test/","tags":[["Alogrithm","/xtuoj.io/tags/Alogrithm/"]],"categories":[[" ",""]],"content":"Index Index 方程 横竖线 数字 公共的数 p^2*q 环 字符串_1 方程 方程 横竖线 横竖线 数字 数字 公共的数 公共的数 p^2*q p^2*q 环 环 字符串_1 字符串_1 "},{"title":"XtuOJ Part II","date":"2025-05-21T09:48:31.000Z","url":"/xtuoj.io/2025/05/21/XtuOJ-Part-II/","tags":[["Alogrithm","/xtuoj.io/tags/Alogrithm/"]],"categories":[[" ",""]],"content":"Index Index 最小化 加一 删除 Cow 分段 菱形 字符矩阵 矩形 积 数组 最小化 最小化 加一 加一 举个例子 对于7 2 5 2 ，理解成为边界的外面，存在一个max&#x3D;9 然后就是观察规律了，或者直接模拟这个过程 删除 删除 据说是签到题，所谓让我来就是签个到就走的题归属于贪心，这个题很有意思，难度颇高，但是想出来后，其实也就那样，归属于思维题吧下面对代码给出证明首先证明升序(降序)必可压缩 对于三个数$$a_{1} \\leq a_{2} \\leq a_{3}$$有$$a_{2} - a_{1} \\geq k \\ a_{3} - a_{2} \\geq k$$要证明$$\\lfloor \\frac{a_{1}+a_{2}}{2} \\rfloor + k \\geq \\lfloor \\frac{\\lfloor \\frac{a_{1}+a_{2}}{2} \\rfloor + a_{3}}{2} \\rfloor$$成立，先变形成$$\\lfloor \\frac{a_{1}+a_{2}}{2} + k \\rfloor \\geq \\lfloor \\frac{\\lfloor \\frac{a_{1}+a_{2}}{2} \\rfloor + a_{3}}{2} \\rfloor$$要证上式，先证下式成立，即$$\\frac{a_{1}+a_{2}}{2} + k \\geq \\frac{\\lfloor \\frac{a_{1}+a_{2}}{2} \\rfloor + a_{3}}{2}$$即$$a_{1}+a_{2} + 2k \\geq \\lfloor \\frac{a_{1}+a_{2}}{2} \\rfloor + a_{3}$$即$$2k \\geq \\lfloor \\frac{a_{1}+a_{2}}{2} \\rfloor -a_{1} + a_{3} - a_{2}$$因为$$a_{2} \\geq \\frac{a_{1}+a{2}}{2} \\geq \\lfloor \\frac{a_{1}+a{2}}{2} \\rfloor \\geq a_{1}$$则上式放缩为$$2k \\geq a_{2}-a_{1}+a_{3}-a_{2}$$为题设条件，故原式成立，单调下降时同理可证 然后证明，该从小到大处理得到的值是最大的怎么理解这个呢 代码 Cow Cow 思路不难，但一直过不了，应该是统计方式的问题错误原因竟是： 他看错题目了！！！ 分段 分段简单，注意全部为零的情况 菱形 菱形找规律，我讨厌找规律 字符矩阵 字符矩阵给出证明： 矩形 矩形 我还是太菜了。。。。 积QAQ，一直在debug，思路不清楚，代码丑陋，如果有更好的解法，一定要拿过来看 积 找老师要了一份思路清楚的码 数组 数组 第一次体验到被卡常，wc，太痛苦了 "},{"title":"XtuOJ 0x11","date":"2025-05-21T09:47:26.000Z","url":"/xtuoj.io/2025/05/21/XtuOJ-0x11/","tags":[["Alogrithm","/xtuoj.io/tags/Alogrithm/"]],"categories":[[" ",""]],"content":"Index Index 中位数 图像 Wave 彩球 冰墩墩与颜色 红球与白球 瓷片 Blocks &amp; Blocks II &amp; Blocks III 矩阵快速幂 中位数 中位数 Code 1 : 我也不知道这个代码交上去对不对，因为这个代码的下标处理有问题，想了半天，必须要同时记录下标和值，得用结构体或者二维数组 ，懒得重构了，便用了老师的二维数组Code 2: 正统的递归板子Code 3: 图像 图像 整型1只有32位，用来左移会导致整型溢出，用长整型1LL，避免溢出还有这个题，读题都读了十多分钟，这个分形第一次做真看不出来::&gt;_&lt;:: Wave Wave 这个记忆化搜索，可以理解为从最底层开始，按照中前后序遍历，标记节点，逐层向上递归时间复杂度是O(N^2),和下面的dp正好是一样的思路Code 1 (Memoization Depth-First Search) Code 2 (Dynamic Programming) 彩球 彩球 冰墩墩与颜色 冰墩墩与颜色 红球与白球 红球与白球 我的思路是偶然间发现的，这才是正统的(?) 瓷片 瓷片 这个题，给第一次写正经的dp题的我不小的冲击。。。。这个状态转移方程太抽象了，第一次看到根本想不到 Blocks &amp; Blocks II &amp; Blocks III Blocks II Blocks III Blocks 美妙的dp题,说句题外话，查阅题解时在csdn看到第一种最简单的dp，嗯嗯，这人写的代码太tm丑了，莫名其妙的逻辑，边缘细节处理也是依托，还喜欢装吊子，看的我直恶心 矩阵快速幂 斐波拉契数的平方和 斐波拉契数+1 板子题就比较简单了 完结撒花( •̀ ω •́ )✧"},{"title":"XtuOJ 0x10","date":"2025-05-21T09:46:15.000Z","url":"/xtuoj.io/2025/05/21/XtuOJ-0x10/","tags":[["Alogrithm","/xtuoj.io/tags/Alogrithm/"]],"categories":[[" ",""]],"content":"Index Index Dice I 21Points 菱形II Alice and Bob 黑棋与白棋 素数螺旋 交叉点 表格 正方形 Game Markdown表格 3个矩形与1个正方形 完结撒花ヾ(≧▽≦*)o Dice I Dice I暴力模拟，码如专题名 21Points 21Points可以说，如果我没有再写一遍拼图，我想不出这个解法我刚开始看到这个题的时候，觉得可以用类似完美回文数的做法来处理，然后当我一通操作后，否定了这个想法但是在这个过程中，我发现这个结构可以用搜索+回溯来处理，便立马动手，经过四个小时(思路成型，敲代码，debug)，终于干掉这道题了这种把以前学过的知识转化成自己的感觉真不错 菱形II 菱形II一开始写了一份纯粹的暴力解法，虽然没错，但是MLE且TLE。。。。 Alice and Bob Alice and Bob 黑棋与白棋应该是我写过的码量最大的题目了。。。。写对角线的逻辑时，想多了，构造了一个只适用于正方形的计数，还想了我好久QAQ顺便总结一下，在调试坐标类的代码时，打印坐标会方便调试很多 素数螺旋 素数螺旋两份代码，一份是我的，一份是老师的。。。。老师的思路明显比我的清楚QAQ 交叉点 交叉点破防了，x，y数组开小了，一直错QAQ 表格 表格 正方形 正方形 Game Game Markdown表格 Markdown表格 3个矩形与1个正方形 3个矩形与1个正方形 完结撒花ヾ(≧▽≦*)o"},{"title":"XtuOJ 0x06","date":"2025-05-21T09:43:52.000Z","url":"/xtuoj.io/2025/05/21/XtuOJ-0x06/","tags":[["Alogrithm","/xtuoj.io/tags/Alogrithm/"]],"categories":[[" ",""]],"content":"Index Index A B C D E F G H A模拟题，具体看怎么实现删除 ball B cycle 这是错误代码，原因在于字符串处理无法处理n&gt;9的情况，一开始没想到，直到疯狂RE时，写对拍才发现，但是思路是没问题的，重新写一遍就过了 false code AC Code: C 数码串又RE了，数组越界，我还开了两倍长的数据，没想到三倍长的数据长度都不够，应该估计一下最差情况可能需求的数组长度的以后RE先检查数组，QAQ D 神经网络 这玩意就是个关系矩阵的幂，模拟关系的复合运算就行了，估计以后不会遇到这样的题了 E 最大可变字符串我觉得这个代码很巧妙，变量用的恰到好处，我自己思路不对，这是别人的代码我目前已知这个题有两种思路1.排序对比是否相同2.统计字符出现次数是否相同这是第一种，我觉得第二种的实现太过麻烦，就懒得去思考了 F 方程组 没什么好说的，剪枝优化，注意负数解就行了 G 原根用同余的一个性质防止爆long long 和TLE，其他模拟就完了 H 四位数模拟，不难Code1: Code2: "},{"title":"XtuOJ Part I","date":"2025-05-21T08:57:25.000Z","url":"/xtuoj.io/2025/05/21/XtuOJ-Part-I/","tags":[["Alogrithm","/xtuoj.io/tags/Alogrithm/"]],"categories":[[" ",""]],"content":" 记载刷xtuoj遇到的一些题目 xtuoj-part1 目录 Maze 刷油漆 完美回文数 最多的可变字符串 青蛙 完全平方数2 拼图 Prime Palindromes 众数 premixSum 埃氏筛 最大的数 maze Maze模拟题，第一次写是照着别人的思路写的，这是第二次写的代码，老师说可以更改一下逻辑，直接检查，避免回溯，但是我懒的调了，就这样吧 code 最大的数 最大的数完完全全的思维题我不是完全理解这个思路，也就是说，我不会证明这个为什么可行，只是觉得，啊啊，对啊，就是这样,很有道理······ The Max Number 刷油漆 先上题 刷油漆 题目大意 n,m,c,t表示行数，列数，颜色数，刷漆次数谢大以前给研究生出的压轴题，还是具有一定的思维难度的算法的核心在于构建O(T)的代码突破点在于将操作顺序和读入顺序倒置掌握了这点，剩下的就可以顺利突破了上代码 code 返回目录 完美回文数 perfect palindrome Number 1e5内的完美回文数只有三个{11，1001，1111} 输入T(样例数)，n(数据) 输出：每行输出一个样例的结果，如果n不能由完美回文数累加得到，输出0 思路：动态规划 很正常，如果从n反推由多少个pre_pal组成，思路会很复杂且不清楚，但是我倒过来思考 如果我提前把所有完美回文数可能的组成情况预先计算并储存进入数组，思路就会清楚很多 而且也很容易实现代码，甚至时间复杂度是O(T); 真是优雅啊 code 返回目录 最多的可变字符串 最多的可变字符串 模拟题，重在实现代码，思路很直接 关于&lt;string.h&gt;头文件里的两个函数 1.strcpy strcpy函数用于将一个字符串复制到另一个字符串中，其函数原型为： char *strcpy(char *dest, const char *src); 其中，dest为指向目标字符串的指针，src为指向源字符串的指针。strcpy函数会将src指向的字符串复制到dest指向的字符串中，并返回dest指针strcpy函数会复制包括字符串结尾的空字符’\\0’在内，因此目标字符串dest必须有足够的空间来存储源字符串 2.strcmp strcmp函数用于比较两个字符串的大小，其函数原型为： int strcmp(const char *str1, const char *str2); 参数说明：str1：要比较的第一个字符串。str2：要比较的第二个字符串。返回值：strcmp 函数返回一个整数，表示两个字符串的比较结果： 返回 0：表示 str1 和 str2 内容相同。返回正值：表示 str1 按字典顺序大于 str2，即 str1 中第一个不同字符的 ASCII 值大&gt; 于 str2 中对应字符的 ASCII 值。返回负值：表示 str1 按字典顺序小于 str2，即 str1 中第一个不同字符的 ASCII 值小&gt; 于 str2 中对应字符的 ASCII 值。工作原理：strcmp 逐个比较两个字符串的字符，直到找到第一个不同的字符或其中一个字符串结束（遇到空字符 ‘\\0’）。如果字符串在比较之前的部分完全相同且长度不同，则较短的字符串按字典顺序被认为是较小的。 上代码 code 返回目录 青蛙 青蛙 该题不是很难，本质是一个数学题，找到规律即可做出但是如果没有想到数学方法，就会很困难，纯模拟的思路只有循环队列可以较为轻松的实现 code 返回目录 完全平方数2找个时间重写一下 完全平方数2 总结以下这类题型的规律对于给定方程的求解，参变分离，把方程转化成两个因式相乘&#x3D;一个已知数的形式枚举其中两个因式，解方程，判断是否符合条件即可所以，重点就在于怎么构造方程 code 返回目录 拼图这个题凭我自己是写不出来的，下面这个代码用了回溯，十分巧妙详细过程我用流程图展示了 拼图 code 返回目录 prime palindromesproblem Prime Palindromes 本题是在洛谷上的题其实说明和提示在题目里面就有了本题重要的是先生成所有的回文质数，然后再判断是否符合条件否则，TLE警告详细讲解在注释 code 返回目录 众数problem 众数 二分基础题，但由于我刚接触二分的原因，这个题卡了很久，而且一贯的，这个题卡了Long long二分+检查二分查找区间最大值，区间最大值可以转化为众数的出现次数在条件k的限制下，检查区间内的操作能否满足条件，满足则扩大区间，不满足则缩小区间 code1 code2 返回目录 premixSum 前缀和思路打开了，这个题目用二分总结一下使用二分的情况：在单个数组里高效的查找最大最小值，或者最小最大值对于向下查找还是向上查找，就要看目的是什么了使用二分时，往往有一个可以用在check函数里的限制条件left和right可以对应区间里的最小值或者最大值这些都是套路，真正重要的是明白二分查找什么时候该用，该怎么用oj上使用二分的题目大部分都是一个套路，只是有些题目的二分方法比较难发现，比如众数，比如这道题 premix_sum 埃氏筛两份代码没什么区别，只有一个关于埃氏筛的小细节，导致时间效率不一样原题：哈希 code1 code2 返回目录"},{"title":"Index","date":"2025-05-21T08:28:53.000Z","url":"/xtuoj.io/2025/05/21/Index/","categories":[[" ",""]],"content":"概述我作为一个小白，想要写完学校 oj 平台上大一上学期的作业是十分困难的，往往耗费我很多的时间和精力在一个题目上。 现在我将我的一些笔记整理在这里，以供参考。 目录 XtuOJ Part I XtuOJ 0x06 XtuOJ 0x10 XtuOJ 0x11 XtuOJ Part II Class Test "},{"title":"categories","date":"2025-05-21T08:34:31.000Z","url":"/xtuoj.io/categories/index.html","categories":[[" ",""]]},{"title":"tags","date":"2025-05-21T08:33:53.000Z","url":"/xtuoj.io/tags/index.html","categories":[[" ",""]]},{"title":"search","date":"2025-05-21T08:37:10.000Z","url":"/xtuoj.io/search/index.html","categories":[[" ",""]]}]